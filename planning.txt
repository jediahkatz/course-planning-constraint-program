# warning: this info may be out of date and is not meant to document behavior

> feature: allow or of requirements
- may require big overhaul/refactor of Requirements and RequirementBlocks
- issue: if we have (course1 and course2) or (course3 and course4), this
requires multiple courses to satisfy
- do we want to allow a block of requirements to be satisfied by possibly different-size sequences of courses?
    - e.g., should we allow (c1 and c2) or (c3 and c4 and c5)
    - maybe yes, if we want requirements to be completely recursive (i.e. collapse RequirementBlock and Requirement)
    - but also this ^ might be a premature abstraction that will just make it harder to implement efficient constraints
- should we support:
    - sum ( r.is_satisfied for r in reqs_group ) >= k ?
        - note that this generalizes OR (k=1) and AND (k=n) !

BaseReq = (current definition of Requirement)
    | course
    | category
    | dept

Requirment =
    | BaseReq
    | MultiReq k [Requirement]

maybe we can constrain recursively like:
- satisfied[SingleReq r]       <-> sum ( counts_for[c, r] for c in courses ) == 1
- satisfied[MultiReq k reqs]   <-> sum ( satisfied[r] for r in reqs ) >= k
- sum ( satisfied[r] == 1 for r in all_requirements )

plus redundant:
- for each top-level SingleReq r:    sum ( counts_for[c, r] for c in courses ) == 1

> feature: change course requests to semester requirements

> feature: reate a better system for double counting (+ reqs that can always double count)
list of example rules on double counting:
# college
- can double count at most one course per major with the sector requirement
- majors in (set S of majors) can double count two courses in major with two specific sectors
- double majors must have 18 unique courses between the two majors (24 for triple majors)
- can count unlimited courses between gen ed and minor
- can count unlimited courses between foundational approach and (major, minor, sector)
- can count one course between two majors
- can double count at most 4 courses between submat and undergrad
# eng
- can count at most two courses for minor with courses specified on course planning guide
- must take at least 22 eng courses to double major
- can double count at most 3 courses between submat and undergrad
- no course can be triple counted
# wharton
- can always double count free electives with concentration, but can count at most one business breadth 

then major_requirements becomes requirement_blocks = [CIS_BSE, CIS_MSE, SEAS_DEPTH, SEAS_WRIT, SEAS_ETHICS]
then we have Curriculum = { requirement_blocks, double_count_matrix }
double_count_matrix[block1_idx][block2_idx] = max number of courses that can double count between the two blocks

that would get us everything except:
- no course can be triple counted
- majors in (set S of majors) can double count two courses in major with two specific sectors
- must take at least 22 eng courses to double major

we should directly enforce no triple counting; in fact we should enforce it globally to
make thing nicer
the other two we can ignore for now


> feature: account for timeslots in the current semester (nischal)
- make use of course time blocks
    8:30am
    10:15am
    12:00pm
    1:45pm
    3:30pm
    5:15pm
    7:00pm
    8:30pm
